<!DOCTYPE HTML>
<!-- saved from url=(0060)http://extremelysatisfactorytotalitarianism.com/blog/ -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="en-US" dir="ltr"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
 
<META charset="UTF-8"> <TITLE>Let’s Make a Street View! Part 0 | Extremely 
Satisfactory Totalitarianism</TITLE> <LINK href="http://gmpg.org/xfn/11" rel="profile"> 
<LINK href="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="http://extremelysatisfactorytotalitarianism.com/blog/xmlrpc.php" 
rel="pingback"> <LINK title="Extremely Satisfactory Totalitarianism » Feed" 
href="http://extremelysatisfactorytotalitarianism.com/blog/?feed=rss2" rel="alternate" 
type="application/rss+xml"> <LINK title="Extremely Satisfactory Totalitarianism » Comments Feed" 
href="http://extremelysatisfactorytotalitarianism.com/blog/?feed=comments-rss2" 
rel="alternate" type="application/rss+xml"> <LINK title="Extremely Satisfactory Totalitarianism » Let’s Make a Street View! Part 0 Comments Feed" 
href="http://extremelysatisfactorytotalitarianism.com/blog/?feed=rss2&amp;p=2120" 
rel="alternate" type="application/rss+xml"> 
<SCRIPT src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/comment-reply.js" type="text/javascript"></SCRIPT>
 <LINK title="RSD" href="http://extremelysatisfactorytotalitarianism.com/blog/xmlrpc.php?rsd" 
rel="EditURI" type="application/rsd+xml"> <LINK href="http://extremelysatisfactorytotalitarianism.com/blog/wp-includes/wlwmanifest.xml" 
rel="wlwmanifest" type="application/wlwmanifest+xml"> <LINK title="Extremely Satisfactory Totalitarianism" 
href="http://extremelysatisfactorytotalitarianism.com/blog" rel="index"> <LINK 
title="Hyperbinary representations and amateur-hour number theory" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=351" 
rel="start"> <LINK title="We Can Do Anything But Keep Things In Perspective" 
href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1402" rel="prev"> 
<META name="GENERATOR" content="MSHTML 11.00.9600.17207"> <LINK href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120" 
rel="canonical"> <LINK href="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/wp-syntax.css" 
rel="stylesheet" type="text/css" media="screen"> 
<STYLE type="text/css">
/* <![CDATA[ */
img.latex { vertical-align: middle; border: none; }
.entry-content > img.latex { display: block; padding-left: 30px; margin: 1em 0 !important; }
/* ]]> */
</STYLE>
 </HEAD> 
<BODY class="single single-post postid-2120">
<DIV class="hfeed" id="wrapper">
<DIV id="header">
<DIV id="masthead">
<DIV id="branding" role="banner">
<DIV id="site-title"><SPAN><A title="Extremely Satisfactory Totalitarianism" 
href="http://extremelysatisfactorytotalitarianism.com/blog/" 
rel="home">Extremely Satisfactory Totalitarianism</A>					 </SPAN>				 </DIV>
<DIV id="site-description"></DIV><IMG width="940" height="198" alt="" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/orion.png"></DIV><!-- #branding -->
			 
<DIV id="access" role="navigation">
<DIV class="skip-link screen-reader-text"><A title="Skip to content" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120#content">Skip 
to content</A></DIV>
<DIV class="menu">
<UL>
  <LI><A title="Home" href="http://extremelysatisfactorytotalitarianism.com/blog/">Home</A></LI>
  <LI class="page_item page-item-598"><A title="About" href="http://extremelysatisfactorytotalitarianism.com/blog/?page_id=598">About</A></LI>
  <LI class="page_item page-item-1455"><A title="Projects" href="http://extremelysatisfactorytotalitarianism.com/blog/?page_id=1455">Projects</A></LI></UL></DIV></DIV><!-- #access -->
		 </DIV><!-- #masthead -->	 </DIV><!-- #header -->	 
<DIV id="main">
<DIV id="container">
<DIV id="content" role="main">
<DIV class="navigation" id="nav-above">
<DIV class="nav-previous"><A href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1402" 
rel="prev"><SPAN class="meta-nav">←</SPAN> We Can Do Anything But Keep Things In 
Perspective</A></DIV>
<DIV class="nav-next"></DIV></DIV><!-- #nav-above -->				 
<DIV class="post-2120 post type-post hentry category-uncategorized tag-3d tag-canvas tag-code tag-demo tag-google tag-graphics tag-javascript tag-street-view tag-transforms tag-webgl" 
id="post-2120">
<H1 class="entry-title">Let’s Make a Street View! Part 0</H1>
<DIV class="entry-meta"><SPAN class="meta-prep meta-prep-author">Posted 
on</SPAN> <A title="08:03" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120" 
rel="bookmark"><SPAN class="entry-date">10 September 2010</SPAN></A> <SPAN 
class="meta-sep">by</SPAN> <SPAN class="author vcard"><A title="View all posts by Brendan Kenny" 
class="url fn n" href="http://extremelysatisfactorytotalitarianism.com/blog/?author=1">Brendan 
Kenny</A></SPAN>					</DIV><!-- .entry-meta -->					 
<DIV class="entry-content"><!-- Simple Code Embed v1.4.1 | http://www.artiss.co.uk/simple-code-embed --> 
<P>In what was once timely news (<A title="Sorry I Haven't Posted" href="http://sorry.coryarcangel.com/">sorry</A>), 
Google announced <A title="The Google Maps Javascript API V3 - Google Maps JavaScript API V3 - Google Code" 
href="http://code.google.com/apis/maps/documentation/javascript/">version 3 of 
the Google Maps API</A> at their last I/O, designed specifically—but not 
exclusively—with the mobile space in mind. Since it’s not used on the main Maps 
page, I didn’t notice that the new API includes an embeddable “HTML5″ version of 
Street View until the news started making the Twitter rounds.</P>
<P>What’s especially interesting about this new Street View—aside from the fact 
that it’s now available without Flash—is that it takes a divide-and-conquer 
approach to ensuring good performance across browsers. There are at least three 
different rendering “modes” within the new library, triggered by different 
browsers and operating environments. I’m going to take a brief look at each of 
these before moving on to the main event: building our own Street View app. 
Though I might call it <A title="you wanna get sued?" href="http://www.hulu.com/watch/19205/the-simpsons-the-shinnin">StreatVue</A>.</P>
<P><SPAN id="more-2120"></SPAN>I’m trying something new by&nbsp;embedding 
JavaScript demos within the page itself, hopefully keeping readability, 
WordPress content management, asynchronous script loading, and non-CPU-hogging 
demos all playing together nicely. Please let me know if this ends up stupid on 
your system; it’s convenient enough that I’d really like to get it right for the 
future. Source will be minified on this page but available in full (under an 
Apache 2.0 License, though that’s no guarantee it’ll be useful) in the link 
below each demo. Someday I will get good at Git, I promise.</P>
<H2>Street View Ethology</H2>
<P>This is a popular game here at Extremely Satisfactory Totalitarianism. Why 
dig into obfuscated source code—deminifying and rebeautifying—when we can make 
overly general conclusions based on limited data? And no I don’t mean 
ethnography. This has little to do with real ethology, of course, and it made 
more sense when it was about observing Firefox in action (get it??), but what 
are you going to do.</P>
<P>When using the new Maps API, you’re essentially linking against a dynamic 
library, loaded from Google’s servers, with no control over the exact version 
you receive or the way it will choose to render. This is great for bugfixes and 
ongoing expansion of the library, but it does mean that things could change 
completely before I even publish this blog entry. It’s a more explicit use of 
functionality already available when popular JavaScript libraries are loaded 
from publicly-accessible CDNs, for instance, but that’s an interesting topic for 
another day.</P>
<P>Conceptually, Street View (and pretty much any VR/Panorama/whatever program) 
takes images in all directions from a single position and places them on a 
virtual sphere that appears to surround the viewer. Looking at how the images 
are taken:</P>
<P><A href="http://commons.wikimedia.org/wiki/File:Streetview_4th_Gen.png"><IMG 
width="236" height="398" class="aligncenter size-full wp-image-2278" alt='Street View "4th gen" camera' 
src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/Streetview_4th_Gen.png"></A></P>
<P>it’s at least easy to imagine how, starting with a view direction, the images 
could be placed on screen and distorted to give this impression. If the 
distortion is done correctly, spatial relationships between features in the 
scene are preserved and it appears as if that place is reconstructed on screen. 
Things don’t feel quite right (for instance, since this ideal viewer’s eye never 
moves, there is no parallax between the foreground and the background), but the 
effect is very convincing.&nbsp;The key is in how the images are projected onto 
the screen, but as long as pixels end up where they need to be, there are many 
ways to store and display the source images. Exploring one way of doing this 
will be the main concern of the next post.</P>
<P>I’ve picked a spot here in Austin that you can use to identify Street View’s 
rendering method in your favorite browser. It’s not the prettiest picture of a 
place ever taken, but it has some features that will be useful for our purposes, 
like the long straight lines of the road and the checkerboard patterns on the 
buildings up ahead. The top and bottom of the view are rather blurry—a hallmark 
of an older generation of Street View photos, I think—but on the plus side, 
there’s the totally sweet Texas State Capitol building, some kind of ghost car, 
and a stab at&nbsp;guerrilla&nbsp;product placement by FedEx-Kinko’s.</P>
<P>Click to see our spot in the new JavaScript Street View:</P>
<P style="text-align: center;"><A href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/official/v3example.html"><IMG 
width="147" height="147" title="bigger than your state's, baby" class="size-full wp-image-2135" 
style="padding-right: 10px; vertical-align: middle;" alt="Street View Example" 
src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/austin_example.png"></A><A 
title="Street View Example" href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/official/v3example.html"><STRONG>Official 
Google Street View V3</STRONG></A></P>
<P>For reference, <A title="Google Maps" href="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;sll=37.0625,-95.677068&amp;sspn=51.754532,82.441406&amp;ie=UTF8&amp;hq=&amp;layer=c&amp;cbll=30.262386,-97.744927&amp;panoid=5_B3S9AOF218HMm1sxtSIw&amp;cbp=13,26.82,,0,0.92&amp;ll=37.0625,-95.677068&amp;spn=0.005197,0.00942&amp;z=17">here 
is the same spot on maps.google.com</A>, using the normal Flash client.</P>
<P>As I mentioned above, there appear to be three approaches to rendering in the 
new Street View.</P>
<H2>Mode 1 – “HTML4″</H2>
<P>Open <A title="Street View Example" href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/official/v3example.html">the 
example page</A> and look to the right, past the ghost car, at the bridge’s 
railing. If the railing and sidewalk remain curved no matter how you move the 
viewport (see picture), then Street View is using this type of rendering in your 
browser. If you can make the railing perfectly horizontal, move on to modes 2 
and 3.</P>
<P><IMG width="560" height="336" title="There are ghost cars all over these highways, you know." 
class="aligncenter size-full wp-image-2158" alt="Curved Bridge Railing" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/curved_railing.jpg"></P>
<P>Google’s Geo team has informally referred to this mode as the “HTML4″ 
approach (and if that makes your head a splode, trust me, just turn back 
now).</P>
<P>Street View images are stored as tiles using an <A title="Equirectangular projection" 
href="http://en.wikipedia.org/wiki/Equirectangular_projection">equirectangular 
projection</A>, which you can see directly in <A title="Google Street View Tile Viewer Demo" 
href="http://geo.jamiethompson.co.uk/streetview_tiles.php?postcode=SW1W+9TQ&amp;zoom=3">this 
great demo by Jamie Thompson</A> (and related <A title="Google Streetview Static API - Jamie Thompson" 
href="http://jamiethompson.co.uk/web/2010/05/15/google-streetview-static-api/">blog 
post</A>). I’ve stolen an image from him of tiles for one location, but go take 
a look at his work, it’s rad:</P>
<P><A href="http://jamiethompson.co.uk/web/2010/05/15/google-streetview-static-api/"><IMG 
width="530" height="264" class="aligncenter size-full wp-image-2288" alt="street view tiles" 
src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/zoom3.png"></A></P>
<P>Since the tiles will be projected onto the inside of a sphere, it makes some 
sense that Google would store them as if they were a map themselves. It’s also 
likely that this format was chosen because it is the same projection used for 
the regular satellite and street maps on Google Maps, allowing a lot of the math 
involved in things like coordinate picking to be shared.</P>
<P>Looking at Jamie Thompson’s examples and this cool <A title="Tissot's Indicatrix" 
href="http://en.wikipedia.org/wiki/Tissot's_Indicatrix">Tissot’s indicatrix</A> 
created by <A title="User:Sting" href="http://commons.wikimedia.org/wiki/User:Sting">Eric 
Gaba</A>,</P>
<P><A href="http://en.wikipedia.org/wiki/File:Tissot_indicatrix_world_map_equirectangular_proj.svg"><IMG 
width="500" height="250" class="aligncenter size-full wp-image-2143" alt="Tissot indicatrix of equirectangular projection" 
src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/tissot_indicatrix_equirectangular_proj.png"></A></P>
<P>you can see that the equirectangular projection has relatively minimal 
distortion surrounding the equator, which, in a Street View scene, just so 
happens to be the area filled with the things (buildings, streets) that we want 
to look at. As a result, the “HTML4″ approach is to just display the Street View 
image tiles directly, exactly like satellite and street map tiles are 
rendered.&nbsp;The distortion increases as one looks toward the “poles” of the 
Street View virtual sphere, but the average user (aka not you) will probably not 
pan all the way up to check what the sky looked like on the day the 
Google-mobile passed by.</P>
<P>Since the equirectangular projection is non-linear, almost no straight lines 
are mapped to straight lines—hence the tell-tale curved bridge railing.&nbsp;If 
the view is zoomed out and overflow clipping is disabled, this becomes more 
obvious:</P>
<P><IMG width="560" height="357" class="aligncenter size-full wp-image-2184" 
alt="fully zoomed out view" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/html4_zoomed_out.jpg"></P>
<P>The vector overlay that traces the street is done in SVG or VML, depending on 
the browser, both of which only provide 2d transform mechanisms. Any 3d effect 
has to be done manually, but the overlay doesn’t quite match the movement of the 
street. Without really investigating the cause (we are playing ethology, here, 
after all), it appears that while the length of the overlay is affected by 
perspective, the rotation parameterization is not (in perspective, the horizon 
maps to a hyperbola, not half of some ellipse, a fact I still find 
surprising).</P>
<P>Finally, on my Windows 7 machine, HTML4 mode is currently used in Internet 
Explorer and, somewhat&nbsp;unexpectedly, the newest Firefox and Safari. It also 
appears to be used on all iOS and Android devices; for older models this isn’t 
really surprising—without OpenGL ES 2.0 support they will likely never be able 
to support WebGL—&nbsp;but this situation will probably change soon for just 
about any smartphone released in the last year. Which brings us to…</P>
<H2>Mode 2 – WebGL</H2>
<P><STRONG></STRONG>If you can make the bridge railing completely horizontal on 
<A title="Street View Example" href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/official/v3example.html">the 
example page</A>, <EM>and</EM> the page is super-silky smooth in movement and 
interaction, you probably have yourself a WebGL enabled browser. However, in the 
time I’ve been working on this project, WebGL mode has actually stopped 
appearing for me. If it’s not working for you either, here’s a video of Vladimir 
Vukićević demonstrating the WebGL Street View at the 2010 Mozilla 
Summit:</P><IFRAME src="res://ieframe.dll/dnserrordiagoff.htm" frameborder="0" 
scrolling="" style="width: 640px; height: 385px;" 
onload="scro11me(this)"></IFRAME>
<SCRIPT type="text/javascript">function scro11me(f){f.contentWindow.scrollTo(0,0); }</SCRIPT>
 
<P>Please let me know if you know how to reliably get the WebGL version; I’d 
love to play with it some more.</P>
<H2>Mode 3 – &lt;canvas&gt;</H2>
<P>For those not reading this from the WebGL-blessed near future, we get this 
close approximation. If <A title="Street View Example" href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/official/v3example.html">the 
example page’s</A> projection is correct (the sidewalk and railing are 
straight), but the framerate is a bit lower and the imagery is a little jittery 
while in motion, this is your guy.</P>
<P><IMG width="560" height="336" class="aligncenter size-full wp-image-2159" 
alt="Straight Bridge Railing" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/straight_railing.jpg"></P>
<P>It appears that the straightforward WebGL approach is being emulated using 
the 2d canvas element. The geometry of a sphere is created—its vertices assigned 
texture coordinates within the image tiles for a Street View location—and then 
drawn to screen after being properly positioned around the viewer and projected 
in perspective.</P>
<P>Of course, <A title="4.8.11.1.2 The canvas element - Transformations" href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#transformations">canvas 
doesn’t currently support 3d transformations</A> (it is the “2d” context, after 
all). This can be worked around for simple 3d line or shaded figures since 
drawing instructions must be specified with 2d coordinates anyway. To use the 
built-in transformation support for this purpose, every face of an object to be 
drawn would need its own transformation relative to the object as a whole, which 
would in turn be multiplied by whatever universe and view transforms were needed 
to correctly position the object with respect to the viewer (this was exactly 
the tack taken <A title="Isometry" href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/06/isometry/">here</A>, 
but in CSS).</P>
<P>However, it turns out it’s far faster and easier to just take 3d coordinates, 
apply the universe and view transform to every vertex, drop the z coordinates, 
and then feed the resulting [x, y] values into the canvas drawing routines. This 
is what is done in most of the canvas 3d engines out there, like Mr. doob’s 
awesome&nbsp;<A title="three.js - geometry - cube" href="http://mrdoob.com/projects/three.js/examples/geometry_cube.html">three.js</A>.</P>
<P>Simple drawings aren’t the problem, texturing is. And for that, we’ll need a 
subheading:</P>
<H3>Affine Texture Mapping: It’s Fast</H3>
<P>Textures <EM>could</EM> be applied to faces similarly to what is described 
above—calculating a texel position for each pixel and then plotting it in 2d—but 
that would necessitate opening up the canvas’s pixel data and setting each pixel 
manually. This works for small objects, but fillrate with this approach is too 
slow in current browsers for it to work with large scenes.</P>
<P>Instead, we can fall back to the earlier, slower solution of calculating a 
transformation matrix per face, distorting the image so that when drawn to the 
canvas and clipped to the edges of the transformed polygon, a textured shape 
appears. Because it uses built-in image-handling routines (and is possibly 
hardware accelerated, depending on the browser), this approach ends up being 
fairly fast even with all the extra calculations that have to be made.</P>
<P>There are two&nbsp;subtleties here. First, if you’ve read the blog post I <A 
title="We Can Do Anything But Keep Things In Perspective" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1402">promised</A> 
to post two months ago but probably never will (I’m stealing all the best bits 
for this series), you’d know that it isn’t possible to transform a 
quadrilateral, for instance, into another (arbitrary) quadrilateral using only a 
2d affine transformation (a 2d <A title="Affine transformation" href="http://en.wikipedia.org/wiki/Affine_transformation">affine 
transformation</A> is a 2d linear transformation (which can scale, rotate, and 
shear) plus a translation, <A title="4.8.11.1.2 The canvas element - transform()" 
href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-transform">and 
is supported in the canvas 2d context API</A>). The problem is overdetermined: 
there are 8 coordinate components for a&nbsp;quadrilateral&nbsp;but only 6 
entries in our matrix.</P>
<P>Like linear transformations, affine transformations map parallel lines to 
parallel lines, so a rectangle is forever destined to be a parallelogram no 
matter the transformation. This is actually the geometric manifestation of the 
fact that the system of equations is overdetermined: once three vertices of a 
rectangle are moved at will, the position of the fourth is already determined, 
and a parallelogram remains. But one of the key characteristics of perspective 
is the vanishing point, where parallel lines appear to converge (and so would 
not be parallel on the screen).</P>
<P>Parallelogram:</P>
<P style="text-align: center;"><A href="http://extremelysatisfactorytotalitarianism.com/blog/?p=922"><IMG 
width="446" height="336" title="fancy triangle or fanciest triangle?" class="aligncenter size-full wp-image-1359" 
alt="a parallelogram" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/trans_rect1.png"></A></P>
<P>Not a parallelogram:</P>
<P style="text-align: center;"><IMG width="337" height="337" class="aligncenter size-full wp-image-2312" 
alt="train tracks in perspective" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/perspective_train_tracks.png"></P>
<P>However, <EM>three</EM> vertices&nbsp;can be transformed at will, which 
means, in terms of linear (and affine) transforms, a parallelogram is really 
just a fancy triangle. With a 2d affine transform, arbitrary triangles in 
texture space can be mapped to ones in screen space, and triangles can be put 
together to make just about anything.&nbsp;This is called “affine texture 
mapping” and has been used since time immemorial (or the 80s, who knows) to 
speed texturing on platforms that are especially slow or support only 2d 
transforms. This is again the technique used by most JavaScript 3d canvas 
engines to support textures (<A title="three.js - materials - video" href="http://mrdoob.com/projects/three.js/examples/materials_video.html">here 
is Mr. doob texturing a quad with data from an HTML5 video element</A>), to the 
point that almost all of them draw textured triangles using a function descended 
from&nbsp;<A title="jsgl.js" 
href="http://tulrich.com/geekstuff/canvas/jsgl.js">this library</A> by Thatcher 
Ulrich.</P>
<P>The function (<CODE>drawTriangle()</CODE>) includes one of those classic “// 
TODO: optimize” comments that will probably be there forever because it doesn’t 
really need to be done; in practice, the time needed to calculate the 
transformation matrix is&nbsp;minuscule&nbsp;compared to the time the browser 
needs to complete the subsequent&nbsp;<CODE>drawImage()</CODE> call.</P>
<P>However, it was fun to play with, so I’ve taken a stab at reworking it, 
trying to bring out the geometric side of the problem. The solution becomes much 
simpler when both the input texture vertices and output screen vertices are 
shifted so that one vertex of each is at the origin.&nbsp;With this done, the 
origin now just maps to itself (the triangle is shifted back at the end), so 
only a 2×2 linear transformation is needed.</P>
<P>The full transform—using Paul Heckbert’s classic trick of mapping to and from 
a simple intermediate form (in this case, a “unit triangle”)—maps input [u, v, 
1] to output [x, y, 1], making sure the input and output vertices are paired 
correctly:</P><IMG title="\begin{bmatrix}x \\ y \\ 1 \end{bmatrix}=\begin{bmatrix}1 &amp; 0 &amp; x_0 \\ 0 &amp; 1 &amp; y_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}x_1-x_0 &amp; x_2-x_0 &amp; 0 \\ y_1-y_0 &amp; y_2-y_0 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}u_1-u_0 &amp; u_2-u_0 &amp; 0 \\ v_1-v_0 &amp; v_2-v_0 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}^{-1}\begin{bmatrix}1 &amp; 0 &amp; -u_0 \\ 0 &amp; 1 &amp; -v_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}u \\ v \\ 1 \end{bmatrix}" 
class="latex" alt="\begin{bmatrix}x \\ y \\ 1 \end{bmatrix}=\begin{bmatrix}1 &amp; 0 &amp; x_0 \\ 0 &amp; 1 &amp; y_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}x_1-x_0 &amp; x_2-x_0 &amp; 0 \\ y_1-y_0 &amp; y_2-y_0 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}u_1-u_0 &amp; u_2-u_0 &amp; 0 \\ v_1-v_0 &amp; v_2-v_0 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}^{-1}\begin{bmatrix}1 &amp; 0 &amp; -u_0 \\ 0 &amp; 1 &amp; -v_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}u \\ v \\ 1 \end{bmatrix}" 
src="">
<P>If we set <IMG title="u'_1=u_1 - u_0, x'_1=x_1 - x_0," class="latex" alt="u'_1=u_1 - u_0, x'_1=x_1 - x_0," 
src=""> etc, the middle two matrices combine to form</P><IMG title="\frac{1}{u'_1 v'_2 - u'_2 v'_1}\begin{bmatrix}v'_2 x'_1 - v'_1 x'_2 &amp; u'_1 x'_2 - u'_2 x'_1 &amp; 0 \\ v'_2 y'_1 - v'_1 y'_2 &amp; u'_1 y'_2 - u'_2 y'_1 &amp; 0 \\ 0 &amp; 0 &amp; u'_1 v'_2 - u'_2 v'_1 \end{bmatrix}" 
class="latex" alt="\frac{1}{u'_1 v'_2 - u'_2 v'_1}\begin{bmatrix}v'_2 x'_1 - v'_1 x'_2 &amp; u'_1 x'_2 - u'_2 x'_1 &amp; 0 \\ v'_2 y'_1 - v'_1 y'_2 &amp; u'_1 y'_2 - u'_2 y'_1 &amp; 0 \\ 0 &amp; 0 &amp; u'_1 v'_2 - u'_2 v'_1 \end{bmatrix}" 
src="">
<P>while the translation matrices, surrounding a generic linear transformation 
like that, let the linear transform pass through unchanged, but add a new 
translation component</P><IMG title="\begin{bmatrix}a &amp; c &amp; x_0 - a u_0 - c v_0 \\ b &amp; d &amp; y_0 - b u_0 - d v_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}=\begin{bmatrix}1 &amp; 0 &amp; x_0 \\ 0 &amp; 1 &amp; y_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}a &amp; c &amp; 0 \\ b &amp; d &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}1 &amp; 0 &amp; -u_0 \\ 0 &amp; 1 &amp; -v_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}" 
class="latex" alt="\begin{bmatrix}a &amp; c &amp; x_0 - a u_0 - c v_0 \\ b &amp; d &amp; y_0 - b u_0 - d v_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}=\begin{bmatrix}1 &amp; 0 &amp; x_0 \\ 0 &amp; 1 &amp; y_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}a &amp; c &amp; 0 \\ b &amp; d &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\begin{bmatrix}1 &amp; 0 &amp; -u_0 \\ 0 &amp; 1 &amp; -v_0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}" 
src="">
<P>Here is the resulting code:</P>
<DIV class="wp_syntax">
<DIV class="code">
<PRE class="javascript" style="font-family: monospace;"><SPAN style="color: rgb(0, 102, 0); font-style: italic;">// uses affine texture mapping to draw a textured triangle</SPAN>
<SPAN style="color: rgb(0, 102, 0); font-style: italic;">// at screen coordinates [x0, y0], [x1, y1], [x2, y2] from</SPAN>
<SPAN style="color: rgb(0, 102, 0); font-style: italic;">// img *pixel* coordinates [u0, v0], [u1, v1], [u2, v2]</SPAN>
<SPAN style="color: rgb(0, 51, 102); font-weight: bold;">function</SPAN> drawTexturedTriangle<SPAN style="color: rgb(0, 153, 0);">(</SPAN>img<SPAN style="color: rgb(51, 153, 51);">,</SPAN> x0<SPAN style="color: rgb(51, 153, 51);">,</SPAN> y0<SPAN style="color: rgb(51, 153, 51);">,</SPAN> x1<SPAN style="color: rgb(51, 153, 51);">,</SPAN> y1<SPAN style="color: rgb(51, 153, 51);">,</SPAN> x2<SPAN style="color: rgb(51, 153, 51);">,</SPAN> y2<SPAN style="color: rgb(51, 153, 51);">,</SPAN>
                                   u0<SPAN style="color: rgb(51, 153, 51);">,</SPAN> v0<SPAN style="color: rgb(51, 153, 51);">,</SPAN> u1<SPAN style="color: rgb(51, 153, 51);">,</SPAN> v1<SPAN style="color: rgb(51, 153, 51);">,</SPAN> u2<SPAN style="color: rgb(51, 153, 51);">,</SPAN> v2<SPAN style="color: rgb(0, 153, 0);">)</SPAN> <SPAN style="color: rgb(0, 153, 0);">{</SPAN>
&nbsp;
  ctx.<SPAN style="color: rgb(102, 0, 102);">beginPath</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN><SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">moveTo</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN>x0<SPAN style="color: rgb(51, 153, 51);">,</SPAN> y0<SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">lineTo</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN>x1<SPAN style="color: rgb(51, 153, 51);">,</SPAN> y1<SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">lineTo</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN>x2<SPAN style="color: rgb(51, 153, 51);">,</SPAN> y2<SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">closePath</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN><SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
&nbsp;
  x1 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> x0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  y1 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> y0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  x2 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> x0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  y2 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> y0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
&nbsp;
  u1 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> u0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  v1 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> v0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  u2 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> u0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  v2 <SPAN style="color: rgb(51, 153, 51);">-=</SPAN> v0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
&nbsp;
  <SPAN style="color: rgb(0, 51, 102); font-weight: bold;">var</SPAN> det <SPAN style="color: rgb(51, 153, 51);">=</SPAN> <SPAN style="color: rgb(204, 0, 0);">1</SPAN> <SPAN style="color: rgb(51, 153, 51);">/</SPAN> <SPAN style="color: rgb(0, 153, 0);">(</SPAN>u1<SPAN style="color: rgb(51, 153, 51);">*</SPAN>v2 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> u2<SPAN style="color: rgb(51, 153, 51);">*</SPAN>v1<SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">,</SPAN>
&nbsp;
      <SPAN style="color: rgb(0, 102, 0); font-style: italic;">// linear transformation</SPAN>
      a <SPAN style="color: rgb(51, 153, 51);">=</SPAN> <SPAN style="color: rgb(0, 153, 0);">(</SPAN>v2<SPAN style="color: rgb(51, 153, 51);">*</SPAN>x1 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> v1<SPAN style="color: rgb(51, 153, 51);">*</SPAN>x2<SPAN style="color: rgb(0, 153, 0);">)</SPAN> <SPAN style="color: rgb(51, 153, 51);">*</SPAN> det<SPAN style="color: rgb(51, 153, 51);">,</SPAN>
      b <SPAN style="color: rgb(51, 153, 51);">=</SPAN> <SPAN style="color: rgb(0, 153, 0);">(</SPAN>v2<SPAN style="color: rgb(51, 153, 51);">*</SPAN>y1 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> v1<SPAN style="color: rgb(51, 153, 51);">*</SPAN>y2<SPAN style="color: rgb(0, 153, 0);">)</SPAN> <SPAN style="color: rgb(51, 153, 51);">*</SPAN> det<SPAN style="color: rgb(51, 153, 51);">,</SPAN>
      c <SPAN style="color: rgb(51, 153, 51);">=</SPAN> <SPAN style="color: rgb(0, 153, 0);">(</SPAN>u1<SPAN style="color: rgb(51, 153, 51);">*</SPAN>x2 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> u2<SPAN style="color: rgb(51, 153, 51);">*</SPAN>x1<SPAN style="color: rgb(0, 153, 0);">)</SPAN> <SPAN style="color: rgb(51, 153, 51);">*</SPAN> det<SPAN style="color: rgb(51, 153, 51);">,</SPAN>
      d <SPAN style="color: rgb(51, 153, 51);">=</SPAN> <SPAN style="color: rgb(0, 153, 0);">(</SPAN>u1<SPAN style="color: rgb(51, 153, 51);">*</SPAN>y2 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> u2<SPAN style="color: rgb(51, 153, 51);">*</SPAN>y1<SPAN style="color: rgb(0, 153, 0);">)</SPAN> <SPAN style="color: rgb(51, 153, 51);">*</SPAN> det<SPAN style="color: rgb(51, 153, 51);">,</SPAN>
&nbsp;
      <SPAN style="color: rgb(0, 102, 0); font-style: italic;">// translation</SPAN>
      e <SPAN style="color: rgb(51, 153, 51);">=</SPAN> x0 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> a<SPAN style="color: rgb(51, 153, 51);">*</SPAN>u0 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> c<SPAN style="color: rgb(51, 153, 51);">*</SPAN>v0<SPAN style="color: rgb(51, 153, 51);">,</SPAN>
      f <SPAN style="color: rgb(51, 153, 51);">=</SPAN> y0 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> b<SPAN style="color: rgb(51, 153, 51);">*</SPAN>u0 <SPAN style="color: rgb(51, 153, 51);">-</SPAN> d<SPAN style="color: rgb(51, 153, 51);">*</SPAN>v0<SPAN style="color: rgb(51, 153, 51);">;</SPAN>
&nbsp;
  ctx.<SPAN style="color: rgb(102, 0, 102);">save</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN><SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">transform</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN>a<SPAN style="color: rgb(51, 153, 51);">,</SPAN> b<SPAN style="color: rgb(51, 153, 51);">,</SPAN> c<SPAN style="color: rgb(51, 153, 51);">,</SPAN> d<SPAN style="color: rgb(51, 153, 51);">,</SPAN> e<SPAN style="color: rgb(51, 153, 51);">,</SPAN> f<SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">clip</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN><SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">drawImage</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN>img<SPAN style="color: rgb(51, 153, 51);">,</SPAN> <SPAN style="color: rgb(204, 0, 0);">0</SPAN><SPAN style="color: rgb(51, 153, 51);">,</SPAN> <SPAN style="color: rgb(204, 0, 0);">0</SPAN><SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
  ctx.<SPAN style="color: rgb(102, 0, 102);">restore</SPAN><SPAN style="color: rgb(0, 153, 0);">(</SPAN><SPAN style="color: rgb(0, 153, 0);">)</SPAN><SPAN style="color: rgb(51, 153, 51);">;</SPAN>
<SPAN style="color: rgb(0, 153, 0);">}</SPAN></PRE></DIV></DIV>
<P>It is now much clearer that we’re dividing by a determinant (there’s that 
parallelogram again), which means that everything will be fine as long as the 
three texture coordinates are not&nbsp;collinear. If they are, the input 
triangle has no area and the function will fail when it tries to divide by zero; 
this just reflects the reality that there’s no way to expand a line in texture 
space to a triangle in screen space. You could also, you know, put in a check 
for that situation, but be careful of numerical problems with <EM>nearly</EM> 
degenerate triangles. This can actually be more of an issue than is initially 
apparent: JavaScript uses double-precision floats for its numeric type, but for 
legacy and performance reasons, many browsers use single precision for things 
like transformations internally.</P>
<P>Hey, look, it’s interactive:</P>
<P>
<DIV id="demo1" style="width: 640px; height: 480px; position: relative;">Hi! 
You'll need canvas support and running JavaScript to see this demo.</DIV>
<SCRIPT>
    (function() {
      var demo = document.createElement('script');
      demo.src = 'http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/embeds/affine1/affineDemo.min.js';
      
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(demo, s);
      
      demo.addEventListener('load', function() {
        if (document.createElement('canvas').getContext) {
          createAffineDemo(document.getElementById('demo1'), 1);
          setTimeout(function() {
            createAffineDemo(document.getElementById('demo2'), 2);
          }, 10);
          setTimeout(function() {
            createAffineDemo(document.getElementById('demo3'), 3);
          }, 10);
        }
      }, false);
    })();
  </SCRIPT>

<P></P>
<P style="text-align: center;"><A title="Affine Texture Mapping Demo - Source" 
href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/embeds/affine1/affineDemo.js">View 
Source!</A></P>
<P>But there’s something not quite right about that triangle, which brings us to 
the second&nbsp;subtlety I mentioned above (I hadn’t forgotten). It is, perhaps, 
not that subtle.</P>
<H3>Affine Texture Mapping: It’s Really Wrong</H3>
<P>Even though they’re clearly anchored to one another, when the box and the 
triangle are rotated, they don’t seem to move together correctly. It’s difficult 
to describe (it is for me, at least), but it seems that as the box is rotated 
one way and the triangle goes with it, some sort of distortion happens within 
the triangle that kind of shifts the texture back the other way.</P>
<P>The slider adjusts the opacity of the entire transformed checkerboard to show 
how the texture moves before it is clipped to the edges of the triangle (that 
is, if you see a slider. if not, sad face, but try entering a number between 0 
(transparent) and 100 (opaque) in the text box to adjust). With the full 
checkerboard visible and manipulated, the texture looks like it’s being sheared 
and rotated—not put in perspective—which is because it <EM>is</EM> only being 
sheared and rotated. That’s all an affine transform can do.</P>
<P>Some, less geometric textures can sometimes get away with this, but the 
checkerboard reveals all. It’s made up of squares, which we’re trying to put 
into perspective, which, if done correctly, means that the parallel lines within 
the texture would need to converge if extended. But affine transforms map 
parallel lines to parallel lines…you see where I’m going. It’s not possible to 
do what we’re trying to do with the tools that we have.</P>
<P>Here’s an analogy that will both inform and make the next reveal slightly 
more dramatic. Picture that classic vanishing-point subject, the train tracks. 
I’ll help:</P>
<P><IMG width="179" height="399" class="aligncenter size-full wp-image-2310" 
alt="train tracks from above" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/train_tracks.png"></P>
<P>Thinking of our triangle again, we’re putting the triangle in perspective by 
distorting its geometry, but we’re specifying what to draw with an affine 
transform, which is just a translation combined with a linear transform. We’re 
implicitly asking for a linear interpolation of the texture across the available 
space: if the triangle was originally 100 pixels tall and there was a 
checkerboard square every 10 of those pixels, for every orientation we’d ask the 
browser to draw a (distorted) square every 1/10 of whatever the triangle’s new, 
distorted height was.</P>
<P>In terms of the train tracks, we would (not exactly, but analogously) be 
putting them into perspective by tilting the rails inward as they recede, but 
keeping the ties (aka sleepers) equally spaced and sized.</P>
<P><IMG width="326" height="328" class="aligncenter size-full wp-image-2311" 
alt="train tracks projected incorrectly" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/affine_train_tracks.png"></P>
<P>That’s wrong, of course, since in reality the size of the ties would appear 
to shrink as they recede, as would the distance between them. Our brains 
actually <A title="Forced perspective" href="http://en.wikipedia.org/wiki/Forced_perspective">make 
the problem worse</A> by adjusting our perception of the size of the ties, so 
the top tie looks thicker than the bottom one. This (in my opinion) is what 
feels most wrong about the checkerboard triangle: the squares not only don’t 
become smaller as they tilt away, they actually appear to grow larger.</P>
<P>Looking at the train tracks in “correct” perspective (<A title="File:08 tory railtrack ubt.jpeg" 
href="http://en.wikipedia.org/wiki/File:08_tory_railtrack_ubt.jpeg">here are 
some real ones</A>), there are some points to consider.</P>
<P><IMG width="337" height="337" class="aligncenter size-full wp-image-2312" 
alt="train tracks in perspective" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/perspective_train_tracks.png"></P>
<P>First, the intersection points of the ties and each rail stay in a line, even 
in perspective. More mathematically, we could say that the perspective transform 
maps collinear points to collinear points. The derivation of this fact ends up 
being pretty cute (Jim Blinn: “It never ceases to amaze me that plotting one 
hyperbola against the other yields…a straight line”), but is probably overkill 
at this point.</P>
<P>Second, the intersection points of the ties and the rails are equally spaced 
before projection, but a perspective transform maps them to unequally spaced 
points on the screen.</P>
<P>I mentioned above that the railroad tracks are only analogous to our triangle 
(mildly dramatic reveal in 3, 2, 1…). Our situation is actually much worse. The 
incorrect railroad tracks are basically a distorted quad with an image linearly 
interpolated across it. It would take two triangles to actually do that, each 
with their own texture transform to get their own part of the texture distorted 
correctly within them. And while they would have two vertices in common, keeping 
the texture continuous across the divide, the difference between the two becomes 
very obvious:</P>
<P>
<DIV id="demo2" style="width: 640px; height: 480px; position: relative;">Hi! 
Again, you'll need canvas support and running JavaScript to see this demo.</DIV>
<P></P>
<P style="text-align: center;"><A title="Affine Texture Mapping Demo - Source" 
href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/embeds/affine1/affineDemo.js">View 
Source!</A></P>
<P>That’s just two triangles. When a lot of large, affine-textured triangles are 
put together for a scene, well…</P>
<P><IFRAME width="640" height="505" class="youtube-player" src="res://ieframe.dll/dnserrordiagoff.htm" 
frameborder="0" type="text/html"></IFRAME></P>
<P>And that’s why the N64 was way more awesome. Also: OoT.</P>
<H3>Affine Texture Mapping: It’s Still Useful (and Used)</H3>
<P>Not surprisingly, there is a correct way to do texture mapping in 
perspective, but it involves hyperbolically interpolating the texture image over 
the surface of a transformed polygon. This requires a divide per pixel to do 
correctly, which is slow in software and impossible if we can only use our 
little 2d matrix; perspective projection is decidedly <EM>not</EM> a linear 
transformation.</P>
<P>So, how could affine texture mapping be useful? First, notice that when the 
textured quad is mostly upright and facing the viewer, the texture distortion 
isn’t too extreme, it just seems a bit “swimmy.”</P>
<P>Second, recall that the texture transform is constructed to exactly map the 
three texture coordinates to the three screen coordinates, regardless of the 
incorrect interpolation everywhere else. If every new vertex (along with a new 
triangle) guarantees one more correctly mapped point, subdividing the triangles 
into more triangles would anchor more texture coordinates correctly on the 
screen.</P>
<P>If our two-triangle quad is split into four triangles, it’s still wrong, but 
the movement within the quad is reduced significantly:</P>
<P>
<DIV id="demo3" style="width: 640px; height: 480px; position: relative;">Hi! 
Again, you'll need canvas support and running JavaScript to see this demo.</DIV>
<P></P>
<P style="text-align: center;"><A title="Affine Texture Mapping Demo - Source" 
href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/embeds/affine1/affineDemo.js">They’re 
all the same source!</A></P>
<P>Each of those four triangles could be subdivided themselves, and the 
resulting eight triangles could be subdivided, and so on, as many times as we 
want. At the limit, where each triangle is only one pixel in size (or maybe 
three), the affine texturing would be exactly correct.&nbsp;The tradeoff is a 
bunch of calculations per triangle (at least 4 divisions, you’ll recall)—plus 
the probably overhead-heavy image machinery of the browser—which would end up 
slower than just doing the hyperbolic interpolation in the first place.</P>
<P>Instead, a middle ground can often be found, with triangles small enough to 
bring visible distortion down to a minimum, but big enough so that performance 
doesn’t suffer too much.</P>
<P>And here at the end, things become&nbsp;relevant&nbsp;again. It appears 
(ethology!) that mode 3 of Street View is indeed using affine texture mapping to 
emulate the perspective-correct texture mapping that WebGL hands out for free. 
There is some noticeable jitteriness, but a large part of that could be the 
aliasing along the edges of the triangles. But if you zoom in, you’ll see the 
subtle swimming of the textures (when zoomed in, the triangles are drawn larger, 
but they are less tilted relative to the screen). <A title="Street View Example - Zoomed" 
href="http://extremelysatisfactorytotalitarianism.com/projects/experiments/2010/09/streetview/official/zoomedExample.html">This 
is the example page pre-zoomed for you</A>. Click and drag <EM>slowly</EM> with 
the mouse, looking especially at the patterns of the windows and the trees below 
them (obviously if Street View uses modes 1 or 2 in your browser, you won’t see 
much).</P>
<P>Finally, just for completeness, note that there are a bunch of smart ways 
that the triangles can be subdivided to ensure better performance. Thatcher 
Ulrich demonstrates one method <A title="perspective-correct texturing using HTML 5 canvas" 
href="http://tulrich.com/geekstuff/canvas/perspective.html">here</A>, using a 
heuristic that compares the affine and perspective texturing for a triangle and 
subdividing it if the difference between the two is too great.</P>
<H2>Let’s Make a Street View!</H2>
<P>Those are the rendering modes that I’ve come across. If you’d like to know 
more about the specific testing and decisions that went into making the new 
Street View, check out Marc Ridey’s segment of&nbsp;this Google I/O 2010 
session: <A title="Google I/O 2010 - How Maps API v3 came to be" href="http://www.youtube.com/watch?v=Rcvx5QHTJ5U#t=19m50s">Google 
I/O 2010 – How Maps API v3 came to be</A>.&nbsp;However, start at the beginning 
of that video to see a really great talk given by Susannah Raub on designing an 
inherently data-heavy API for those heavy-data-averse mobile devices.</P>
<P>I’ve actually been thinking about a completely different approach to a 
browser-based, “HTML5″ Street View before V3 of Maps was announced. 
Unsurprisingly, the Geo folks at Google seem pumped about the WebGL future, but 
I’ve gone a different route. Nothing novel, to be sure; the techniques all date 
back 30 years, but that only makes them way cooler. It has also been pretty 
remarkable to be working on the project, face a (usually application-level, but 
genuine) problem, realize some shiny new HTML5 feature solves it exactly, add it 
to the mix, and it all actually works. It’s apparent to me—with the pretty 
astounding features just released or about to be released from every major 
browser vendor—that&nbsp;the web today should be much fancier than it is. I’m 
doing my part; are you?</P>
<P>Next time: perspective projections, a prototype, and maybe some authorial 
conciseness. It’s a thrill a minute.</P><!-- End of Simple Code Embed code -->
											 </DIV><!-- .entry-content -->					 
<DIV class="entry-utility">						This entry was posted in <A title="View all posts in Uncategorized" 
href="http://extremelysatisfactorytotalitarianism.com/blog/?cat=1" rel="category">Uncategorized</A> 
and tagged <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=3d" 
rel="tag">3d</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=canvas" 
rel="tag">canvas</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=code" 
rel="tag">code</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=demo" 
rel="tag">demo</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=google" 
rel="tag">google</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=graphics" 
rel="tag">graphics</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=javascript" 
rel="tag">javascript</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=street-view" 
rel="tag">street view</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=transforms" 
rel="tag">transforms</A>, <A href="http://extremelysatisfactorytotalitarianism.com/blog/?tag=webgl" 
rel="tag">WebGL</A>. Bookmark the <A title="Permalink to Let’s Make a Street View! Part 0" 
href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120" rel="bookmark">permalink</A>.											</DIV><!-- .entry-utility -->
				 </DIV><!-- #post-## -->				 
<DIV class="navigation" id="nav-below">
<DIV class="nav-previous"><A href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1402" 
rel="prev"><SPAN class="meta-nav">←</SPAN> We Can Do Anything But Keep Things In 
Perspective</A></DIV>
<DIV class="nav-next"></DIV></DIV><!-- #nav-below -->							 
<DIV id="comments">
<H3 id="comments-title">3 Responses to <EM>Let’s Make a Street View! Part 
0</EM></H3>
<OL class="commentlist">
  <LI class="comment even thread-even depth-1" id="li-comment-1324">
  <DIV id="comment-1324">
  <DIV class="comment-author vcard"><IMG width="40" height="40" class="avatar avatar-40 photo" 
  alt="" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/a00211a1e1aa4fe920302e7b76da0d91.png">			<CITE 
  class="fn"><A class="url" href="http://mrdoob.com/" 
  rel="external nofollow">Mr.doob</A></CITE> <SPAN 
  class="says">says:</SPAN>		</DIV><!-- .comment-author .vcard -->				 
  <DIV class="comment-meta commentmetadata"><A href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120&amp;cpage=1#comment-1324">
  			14 November 2010 at 17:59</A>		</DIV><!-- .comment-meta .commentmetadata -->
  		 
  <DIV class="comment-body">
  <P>Good to see people messing with all this :)</P>
  <P>While thewildernessdowntown.com an approach I didn’t got to try (probably 
  because it sounded way too crazy, was to do plane deformations (<A href="http://mrdoob.com/lab/javascript/effects/plane_deformations/" 
  rel="nofollow">http://mrdoob.com/lab/javascript/effects/plane_deformations/</A>). 
  Because of the crossdomain limitation, the only way to do this would be by 
  doing a drawImage per pixel in the screen.</P>
  <P>The result/distortion should be 100% perfect, performance probably 
  horrible.</P></DIV>
  <DIV class="reply"><A class="comment-reply-link" onclick='return addComment.moveForm("comment-1324", "1324", "respond", "2120")' 
  href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120&amp;replytocom=1324#respond" 
  rel="nofollow">Reply</A>		</DIV><!-- .reply -->	 </DIV><!-- #comment-##  -->	 
  <UL class="children">
    <LI class="comment byuser comment-author-admin bypostauthor odd alt depth-2" 
    id="li-comment-1326">
    <DIV id="comment-1326">
    <DIV class="comment-author vcard"><IMG width="40" height="40" class="avatar avatar-40 photo" 
    alt="" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/0e0e6bd0d65ebca4a4f7cb64314463c9.jpg">			<CITE 
    class="fn">Brendan Kenny</CITE> <SPAN class="says">says:</SPAN>		</DIV><!-- .comment-author .vcard -->
    				 
    <DIV class="comment-meta commentmetadata"><A href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120&amp;cpage=1#comment-1326">
    			14 November 2010 at 19:24</A>		</DIV><!-- .comment-meta .commentmetadata -->
    		 
    <DIV class="comment-body">
    <P>haha, I had not thought of that.</P>
    <P>Same origin restrictions definitely put a damper on some of the crazier 
    things I’d like to do (and it looks like WebGL 1.0 might move to a similar 
    conservative approach for at least the first version). The arguments for not 
    relaxing them are of course good ones, but I do wish that I could just 
    request and use images directly rather than ridiculously (and 
    TOS-breakingly) proxying them through a server. Some day…</P></DIV>
    <DIV class="reply"><A class="comment-reply-link" onclick='return addComment.moveForm("comment-1326", "1326", "respond", "2120")' 
    href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120&amp;replytocom=1326#respond" 
    rel="nofollow">Reply</A>		</DIV><!-- .reply -->	 </DIV><!-- #comment-##  -->
    	 </LI></UL></LI>
  <LI class="comment even thread-odd thread-alt depth-1" id="li-comment-1325">
  <DIV id="comment-1325">
  <DIV class="comment-author vcard"><IMG width="40" height="40" class="avatar avatar-40 photo" 
  alt="" src="Let’s%20Make%20a%20Street%20View!%20Part%200%20%20Extremely%20Satisfactory%20Totalitarianism_files/a00211a1e1aa4fe920302e7b76da0d91.png">			<CITE 
  class="fn"><A class="url" href="http://mrdoob.com/" 
  rel="external nofollow">Mr.doob</A></CITE> <SPAN 
  class="says">says:</SPAN>		</DIV><!-- .comment-author .vcard -->				 
  <DIV class="comment-meta commentmetadata"><A href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120&amp;cpage=1#comment-1325">
  			14 November 2010 at 18:31</A>		</DIV><!-- .comment-meta .commentmetadata -->
  		 
  <DIV class="comment-body">
  <P>By the way, I moved the three.js examples to github and I’ve broken some of 
  the links on the post :/ You can get the new links from the project page: <A 
  href="https://github.com/mrdoob/three.js/" 
  rel="nofollow">https://github.com/mrdoob/three.js/</A></P></DIV>
  <DIV class="reply"><A class="comment-reply-link" onclick='return addComment.moveForm("comment-1325", "1325", "respond", "2120")' 
  href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120&amp;replytocom=1325#respond" 
  rel="nofollow">Reply</A>		</DIV><!-- .reply -->	 </DIV><!-- #comment-##  -->
  	 </LI></OL>
<DIV id="respond">
<H3 id="reply-title">Leave a Reply <SMALL><A id="cancel-comment-reply-link" 
style="display: none;" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120#respond" 
rel="nofollow">Cancel reply</A></SMALL></H3>
<FORM id="commentform" action="http://extremelysatisfactorytotalitarianism.com/blog/wp-comments-post.php" 
method="post">
<P class="comment-notes">Your email address will not be published. Required 
fields are marked <SPAN class="required">*</SPAN></P>
<P class="comment-form-author"><LABEL for="author">Name</LABEL> <SPAN class="required">*</SPAN><INPUT name="author" id="author" aria-required="true" type="text" size="30"></P>
<P class="comment-form-email"><LABEL for="email">Email</LABEL> <SPAN class="required">*</SPAN><INPUT name="email" id="email" aria-required="true" type="text" size="30"></P>
<P class="comment-form-url"><LABEL 
for="url">Website</LABEL><INPUT name="url" id="url" type="text" size="30"></P>
<P class="comment-form-comment"><LABEL 
for="comment">Comment</LABEL><TEXTAREA name="comment" id="comment" aria-required="true" rows="8" cols="45"></TEXTAREA></P>
<P class="form-allowed-tags">You may use these <ABBR title="HyperText Markup Language">HTML</ABBR> 
tags and attributes:  <CODE>&lt;a href="" title=""&gt; &lt;abbr title=""&gt; 
&lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt; &lt;cite&gt; 
&lt;code&gt; &lt;del datetime=""&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=""&gt; 
&lt;strike&gt; &lt;strong&gt; &lt;pre lang="" line="" escaped=""&gt; </CODE></P>
<P class="form-submit"><INPUT name="submit" id="submit" type="submit" value="Post Comment">
							 <INPUT name="comment_post_ID" id="comment_post_ID" type="hidden" value="2120"> 
<INPUT name="comment_parent" id="comment_parent" type="hidden" value="0">
						 </P>
<P style="display: none;"><INPUT name="akismet_comment_nonce" id="akismet_comment_nonce" type="hidden" value="40bf521fe7"></P></FORM></DIV><!-- #respond -->
						 </DIV><!-- #comments -->			 </DIV><!-- #content -->		 </DIV><!-- #container -->
		 
<DIV class="widget-area" id="primary" role="complementary">
<UL class="xoxo">
  <LI class="widget-container widget_search" id="search-3">
  <FORM id="searchform" role="search" action="http://extremelysatisfactorytotalitarianism.com/blog/" 
  method="get">
  <DIV><LABEL class="screen-reader-text" for="s">Search for:</LABEL>
	 <INPUT name="s" id="s" type="text">
	 <INPUT id="searchsubmit" type="submit" value="Search">	 </DIV></FORM></LI>
  <LI class="widget-container widget_recent_entries" id="recent-posts-3">
  <H3 class="widget-title">Recent Posts</H3>
  <UL>
    <LI><A title="Let’s Make a Street View! Part 0" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=2120">Let’s 
    Make a Street View! Part 0</A></LI>
    <LI><A title="We Can Do Anything But Keep Things In Perspective" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1402">We 
    Can Do Anything But Keep Things In Perspective</A></LI>
    <LI><A title="Transform Rewrite: Dancing Trees and Errant Pixels" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1763">Transform 
    Rewrite: Dancing Trees and Errant Pixels</A></LI>
    <LI><A title="I Guess In Theory That Needs Fixing" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1790">I 
    Guess In Theory That Needs Fixing</A></LI>
    <LI><A title="Firefox Ethology" href="http://extremelysatisfactorytotalitarianism.com/blog/?p=1719">Firefox 
    Ethology</A></LI></UL></LI>
  <LI class="widget-container widget_pages" id="pages-3">
  <H3 class="widget-title">Pages</H3>
  <UL>
    <LI class="page_item page-item-598"><A title="About" href="http://extremelysatisfactorytotalitarianism.com/blog/?page_id=598">About</A></LI>
    <LI class="page_item page-item-1455"><A title="Projects" href="http://extremelysatisfactorytotalitarianism.com/blog/?page_id=1455">Projects</A></LI></UL></LI></UL></DIV><!-- #primary .widget-area -->
	 </DIV><!-- #main -->	 
<DIV id="footer" role="contentinfo">
<DIV id="colophon">
<DIV id="site-info"><A title="Extremely Satisfactory Totalitarianism" href="http://extremelysatisfactorytotalitarianism.com/blog/" 
rel="home">					Extremely Satisfactory Totalitarianism				</A>			 </DIV><!-- #site-info -->
			 
<DIV id="site-generator"><A title="Semantic Personal Publishing Platform" href="http://wordpress.org/" 
rel="generator">					Proudly powered by WordPress.				</A>			 </DIV><!-- #site-generator -->
		 </DIV><!-- #colophon -->	 </DIV><!-- #footer --> </DIV><!-- #wrapper --> 
</BODY></HTML><!-- Dynamic page generated in 2.022 seconds. --><!-- Cached page generated by WP-Super-Cache on 2014-11-08 05:20:06 -->
